#!/usr/bin/python3

# ~/dev/py/alertz/alertzd

import os
import sys
import time
from argparse import ArgumentParser

from alertz import __version__, __version_date__, ALERTZ_PORT, ALERTZ_PROTO
from alertz.daemon import run_the_daemon


def main():

    pgm_name_and_version = "alertz v%s %s" % (__version__, __version_date__)
    timestamp = "%04d%02d%02d-%02d%02d%02d" % time.gmtime()[:6]

    # -- program defaults -------------------------------------------

    with open('/etc/hostname', 'r') as file:
        this_host = file.read().strip()
    # DEBUG
    print("thisHost is '%s'" % this_host)
    # END

    # -- check for config file --------------------------------------

    # -- parse the command line -------------------------------------
    # see docs.python.org/library/argparse.html
    parser = ArgumentParser()

    parser.add_argument('-e', '--ec2Host', action='store_true',
                        help='set if machine is in EC2')

    parser.add_argument('-j', '--justShow', action='store_true',
                        help='show args and exit')
    parser.add_argument('-p', '--port', type=int, default=ALERTZ_PORT,
                        help='port to listen on')
    parser.add_argument('-t', '--showTimestamp', action='store_true',
                        help='show run timestamp')

    parser.add_argument('-T', '--testing', action='store_true',
                        help='test run - write to ./testU')

    parser.add_argument('-V', '--showVersion', action='store_true',
                        help='show version number and date')

    parser.add_argument('-v', '--verbose', action='store_true',
                        help='talk a lot')

    args = parser.parse_args()      # a Namespace object

    # XXX CODE FRAGMENT
    # if name == '__dir__':
    #    return tuple(self)

    # -- fixups -----------------------------------------------------
    args.pgm_name_and_version = pgm_name_and_version
    args.timestamp = timestamp

    # -- sanity checks ----------------------------------------------
    if args.port <= 0 or args.port >= 65536:
        print("port '%d' is out of range" % args.port)
        sys.exit(1)

    # XXX logs/ must be a directory; {access,error}.log must be files
    log_dir = 'logs'
    if not os.path.exists(log_dir):
        os.mkdir(log_dir)
    args.log_dir = log_dir

    # fixups --------------------------------------------------------
    args.pgm_name_and_version = pgm_name_and_version
    args.this_host = this_host

    # -- do it ------------------------------------------------------
    run_the_daemon(args)

if __name__ == '__main__':
    main()
